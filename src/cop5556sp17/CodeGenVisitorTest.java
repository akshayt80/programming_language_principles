
package cop5556sp17;

import java.io.FileOutputStream;
import java.io.OutputStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;

public class CodeGenVisitorTest {

	static final boolean doPrint = true;
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	boolean devel = false;
	boolean grade = true;
	
	@Before
	public void initLog(){
	if (devel || grade) PLPRuntimeLog.initLog();
	}
	@After
	public void printLog(){
	System.out.println(PLPRuntimeLog.getString());
	}
	
	@Test
	public void andTest() throws Exception {
		//scan, parse, and type check the program
		//initLog();
		String input = "programTest {integer i integer j i<-10; j<-30; if ((i==10)&(j<40)){i<-j-i;} if((i==20)&(j==10)){i<-i-1;} if((i==10)&(j>10)){i<-i-5;} if((i<5)&(j<5)){i<-5;j<-5;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		// url:- "http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"
		// file:- "/home/akku/Pictures/LSTM.png"
		String[] args = new String[]{}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	@Test
	public void orTest() throws Exception {
		//scan, parse, and type check the program
		//initLog();
		String input = "programTest {integer i integer j i<-10; j<-i+20; if((i!=j)|(i<j)){i<-j;} if((i==30)|(j!=i)){i<-i-20;} if((i==j)|(j<=30)){i<-j;} if((i<5)|(j<5)){i<-5;j<-5;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		// url:- "http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"
		// file:- "/home/akku/Pictures/LSTM.png"
		String[] args = new String[]{"/home/akku/Pictures/zlatan.jpg", "http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void programTest() throws Exception {
		//scan, parse, and type check the program
		//initLog();
		String input = "programTest file f, url u {image i frame fr u->gray->blur->f;f->i; i->fr; fr->show; sleep(3000);}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		// url:- "http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"
		// file:- "/home/akku/Pictures/LSTM.png"
		String[] args = new String[]{"/home/akku/Pictures/zlatan.jpg", "http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	@Test
	public void programTest1() throws Exception {
		//scan, parse, and type check the program
		//initLog();
		String input = "programTest1 url u {image i image j frame fr u->i; j<-i; i->gray->fr; fr->show; sleep(3000);fr->hide; sleep(3000);j->fr; fr->show; sleep(3000); i->fr; fr->show; sleep(3000);}";

		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		// url:- "http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"
		// file:- "/home/akku/Pictures/LSTM.png"
		String[] args = new String[]{"http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	@Test
	public void programTest2() throws Exception {
	String input = "programTest2 url u, file f {frame fr image i u -> i |-> gray -> fr; i -> f;integer x integer y fr->xloc->x;fr->yloc->y;fr->move(x + 50, y + 50) -> show;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	program.visit(v, null);
	show(program);

	// generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
	byte[] bytecode = (byte[]) program.visit(cv, null);

	// output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);

	// write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);

	// directly execute bytecode
	String[] args = new String[2]; // create command line argument array to
									// initialize params, none in this case
	args[0] = "https://cdn.pixabay.com/photo/2014/02/15/18/09/rose-266785_960_720.jpg";
	args[1] = "rose.jpg";

	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	instance.run();
	}
	
	@Test
	public void programTest3() throws Exception {
		//scan, parse, and type check the program
		//initLog();
		
		String input = "programTest3 {integer i integer j i<-10; j<-8; if((i==10)|(j>10)){i <- i-1;j<-j-1;}}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		// url:- "http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"
		// file:- "/home/akku/Pictures/LSTM.png"
		String[] args = new String[]{"http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	@Test
	public void programTest4() throws Exception {
		//scan, parse, and type check the program
		//initLog();

		String input = "programTest4 url u {image i image j frame fr u->i; i->gray->j; i->fr; fr->show; sleep(3000);fr->hide; sleep(3000);j->fr; fr->show; sleep(3000);}";

		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		// url:- "http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"
		// file:- "/home/akku/Pictures/LSTM.png"
		String[] args = new String[]{"http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	@Test
	public void programTest5() throws Exception {
		//scan, parse, and type check the program
		//initLog();

		String input = "programTest5 url u {image i integer h integer w u->i;w<-screenwidth; h<-screenheight; }";

		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		// url:- "http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"
		// file:- "/home/akku/Pictures/LSTM.png"
		String[] args = new String[]{"http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	@Test
	public void programTest6() throws Exception {
		//scan, parse, and type check the program
		//initLog();
		
		String input = "programTest6 url u {image i integer h integer x u->i;i->width->x; h<-x; }";

		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		// url:- "http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"
		// file:- "/home/akku/Pictures/LSTM.png"
		String[] args = new String[]{"http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	@Test
	public void programTest7() throws Exception {
		//scan, parse, and type check the program
		//initLog();
		
		String input = "programTest7 url u {image i frame fr u->i;i->blur->i; i->fr; fr->show;sleep(3000);fr->hide; i->scale(2)->fr; fr->show; sleep(4000);}";
		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		// url:- "http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"
		// file:- "/home/akku/Pictures/LSTM.png"
		String[] args = new String[]{"http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	@Test
	public void programTest8() throws Exception {
		//scan, parse, and type check the program
		//initLog();
		String input = "programTest8 {boolean x x <- true;}";

		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		// url:- "http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"
		// file:- "/home/akku/Pictures/LSTM.png"
		String[] args = new String[]{"http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	@Test
	public void programTest9() throws Exception {
		//scan, parse, and type check the program
		//initLog();
		String input = "programTest9 url f {image i integer h integer w integer x frame fr f->i; i->gray->fr; fr->show;sleep(2000);}";
		
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		// url:- "http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"
		// file:- "/home/akku/Pictures/LSTM.png"
		String[] args = new String[]{"http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	@Test
	public void programTest10() throws Exception {
		//scan, parse, and type check the program
		//initLog();
		String input = "programTest10 url u {image i integer x integer xlc frame fr u->i; i|->gray->fr;fr->show;sleep(2000);fr->move(10,30)->show;sleep(2000);}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		// url:- "http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"
		// file:- "/home/akku/Pictures/LSTM.png"
		String[] args = new String[]{"http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	@Test
	public void addImageTest() throws Exception {
		//scan, parse, and type check the program
		//initLog();
		String input = "addImage url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show;  sleep 5; k <- k + i; k -> f -> show; sleep 10;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		// url:- "http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"
		// file:- "/home/akku/Pictures/LSTM.png"
		String[] args = new String[]{"http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	@Test
	public void timesTest() throws Exception {
		//scan, parse, and type check the program
		//initLog();
		String input = "timesTest url u {image i frame f \n u->i; i<- 10*i; i -> f -> show; sleep 100;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		// url:- "http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"
		// file:- "/home/akku/Pictures/LSTM.png"
		String[] args = new String[]{"http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	@Test
	public void modTest() throws Exception {
		//scan, parse, and type check the program
		//initLog();
		String input = "modTest url u {image i frame f \n u->i; i<- i%10; i -> f -> show; sleep 50;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		// url:- "http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"
		// file:- "/home/akku/Pictures/LSTM.png"
		String[] args = new String[]{"http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	
	@Test
	public void subImageTest() throws Exception {
		//scan, parse, and type check the program
		//initLog();
		String input = "subImage url u {image i image j image k frame fr \nu -> i; \nu -> j; \n k <- i-j; k -> fr -> show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		
		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		
		//write byte code to file 
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		// directly execute bytecode
		// url:- "http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"
		// file:- "/home/akku/Pictures/LSTM.png"
		String[] args = new String[]{"http://i1.mirror.co.uk/incoming/article10159795.ece/ALTERNATES/s615/Manchester-United-v-Everton-Premier-League.jpg"}; //create command line argument array to initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
}
